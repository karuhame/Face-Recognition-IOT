arguments: E:/1. Bachkhoa/3. Year 3 Seminar 2/3.PBL5/PBL5/src/align_dataset_mtcnn.py E:/1. Bachkhoa/3. Year 3 Seminar 2/3.PBL5/PBL5/src/align_dataset_mtcnn.py E:/1. Bachkhoa/3. Year 3 Seminar 2/3.PBL5/PBL5/Dataset/FaceData/raw E:/1. Bachkhoa/3. Year 3 Seminar 2/3.PBL5/PBL5/Dataset/FaceData/processed --image_size 160 --margin 32 --random_order --gpu_memory_fraction 0.25
--------------------
tensorflow version: 2.16.1
--------------------
git hash: b'c2995ca8151fa47124d2eaf096bf5ba8f031c127'
--------------------
b'diff --git a/src/classifier.py b/src/classifier.py\nindex bd31dc8..23c4ff2 100644\n--- a/src/classifier.py\n+++ b/src/classifier.py\n@@ -40,6 +40,7 @@ from sklearn.svm import SVC\n import matplotlib.pyplot as plt\n from sklearn.metrics import accuracy_score, log_loss\n from sklearn.ensemble import RandomForestClassifier\n+from sklearn.metrics import confusion_matrix\n \n def main(args):\n   \n@@ -90,8 +91,12 @@ def main(args):\n                 end_index = min((i+1)*args.batch_size, nrof_images)\n                 paths_batch = paths[start_index:end_index]\n                 images = facenet.load_data(paths_batch, False, False, args.image_size)\n+                print("Shape: ", images.shape)\n                 feed_dict = { images_placeholder:images, phase_train_placeholder:False }\n                 emb_array[start_index:end_index,:] = sess.run(embeddings, feed_dict=feed_dict)\n+                print("Emb: ", emb_array.shape)\n+\n+                \n             \n             classifier_filename_exp = os.path.expanduser(args.classifier_filename)\n \n@@ -99,7 +104,7 @@ def main(args):\n                 # Train classifier\n                 print(\'Training classifier\')\n                 \n-                model = SVC(kernel=\'linear\', probability=True)\n+                model = SVC(kernel=\'linear\', probability=True, verbose=1)\n                 # model = RandomForestClassifier()\n                 model.fit(emb_array, labels)\n \n@@ -149,6 +154,10 @@ def main(args):\n                     \n                 accuracy = np.mean(np.equal(best_class_indices, labels))\n                 print(\'Accuracy: %.3f\' % accuracy)\n+\n+                # Show confusion matrix\n+                show_confusion_matrix(class_names, labels, best_class_indices)\n+                \n                 \n             \n def split_dataset(dataset, min_nrof_images_per_class, nrof_train_images_per_class):\n@@ -163,7 +172,28 @@ def split_dataset(dataset, min_nrof_images_per_class, nrof_train_images_per_clas\n             test_set.append(facenet.ImageClass(cls.name, paths[nrof_train_images_per_class:]))\n     return train_set, test_set\n \n-            \n+def show_confusion_matrix(class_names, y_true, y_predict):\n+    cm = confusion_matrix(y_true, y_predict)\n+    # Calculate accuracy percentages\n+    cm_percent = cm.astype(\'float\') / cm.sum(axis=1)[:, np.newaxis] * 100\n+\n+    # Plot confusion matrix\n+    plt.imshow(cm_percent, interpolation=\'nearest\', cmap=plt.cm.Blues)\n+    plt.title(\'Confusion Matrix (Accuracy %)\')\n+    plt.colorbar()\n+    tick_marks = np.arange(len(class_names))\n+    plt.xticks(tick_marks, class_names, rotation=45)\n+    plt.yticks(tick_marks, class_names)\n+    plt.xlabel(\'Predicted Label\')\n+    plt.ylabel(\'True Label\')\n+\n+    # Fill matrix with percentage values\n+    for i, j in np.ndindex(cm.shape):\n+        plt.text(j, i, format(cm_percent[i, j], \'.2f\') + \'%\', ha=\'center\', va=\'center\',\n+                color=\'white\' if cm_percent[i, j] > 50 else \'black\')\n+    \n+    plt.show()\n+    \n def parse_arguments(argv):\n     parser = argparse.ArgumentParser()'